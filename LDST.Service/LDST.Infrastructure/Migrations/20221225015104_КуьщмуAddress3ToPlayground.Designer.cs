// <auto-generated />
using System;
using System.Collections.Generic;
using LDST.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LDST.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221225015104_КуьщмуAddress3ToPlayground")]
    partial class КуьщмуAddress3ToPlayground
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LDST.Domain.EFModels.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("GameReservationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameReservationId")
                        .IsUnique();

                    b.HasIndex("GuestId");

                    b.ToTable("Bills", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.CitySport", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("CityId", "SportId");

                    b.HasIndex("SportId");

                    b.ToTable("CitySports", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.GameReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameTimeslotId")
                        .HasColumnType("integer");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameTimeslotId")
                        .IsUnique();

                    b.HasIndex("GuestId");

                    b.ToTable("GameResarvations", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.GameTimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameReservationId")
                        .HasColumnType("integer");

                    b.Property<int>("GameTimeSlotStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("GameTimeSlots", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Guests", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Hosts", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Playground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("PhotoPaths")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitlePhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HostId");

                    b.HasIndex("SportId");

                    b.ToTable("Playgrounds", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.PlaygroundGuestRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("PlaygroundGuestRatings", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Sports", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Bill", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.GameReservation", "GameReservation")
                        .WithOne("Bill")
                        .HasForeignKey("LDST.Domain.EFModels.Bill", "GameReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LDST.Domain.EFModels.Guest", "Guest")
                        .WithMany("Bills")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameReservation");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.City", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.CitySport", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.City", "City")
                        .WithMany("CitySports")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LDST.Domain.EFModels.Sport", "Sport")
                        .WithMany("CitySports")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.GameReservation", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.GameTimeSlot", "GameTimeslot")
                        .WithOne("GameReservation")
                        .HasForeignKey("LDST.Domain.EFModels.GameReservation", "GameTimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LDST.Domain.EFModels.Guest", "Guest")
                        .WithMany("GameReservations")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameTimeslot");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.GameTimeSlot", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.Playground", "Playground")
                        .WithMany("GameTimeSlots")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playground");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Guest", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.User", "User")
                        .WithOne("Guest")
                        .HasForeignKey("LDST.Domain.EFModels.Guest", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Host", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.User", "User")
                        .WithOne("Host")
                        .HasForeignKey("LDST.Domain.EFModels.Host", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Playground", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LDST.Domain.EFModels.Host", "Host")
                        .WithMany("Playgrounds")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LDST.Domain.EFModels.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Host");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.PlaygroundGuestRating", b =>
                {
                    b.HasOne("LDST.Domain.EFModels.Guest", "Guest")
                        .WithMany("PlaygroundGuestRatings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LDST.Domain.EFModels.Playground", "Playground")
                        .WithMany("PlaygroundGuestRatings")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Playground");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.City", b =>
                {
                    b.Navigation("CitySports");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.GameReservation", b =>
                {
                    b.Navigation("Bill");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.GameTimeSlot", b =>
                {
                    b.Navigation("GameReservation");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Guest", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("GameReservations");

                    b.Navigation("PlaygroundGuestRatings");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Host", b =>
                {
                    b.Navigation("Playgrounds");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Playground", b =>
                {
                    b.Navigation("GameTimeSlots");

                    b.Navigation("PlaygroundGuestRatings");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.Sport", b =>
                {
                    b.Navigation("CitySports");
                });

            modelBuilder.Entity("LDST.Domain.EFModels.User", b =>
                {
                    b.Navigation("Guest");

                    b.Navigation("Host");
                });
#pragma warning restore 612, 618
        }
    }
}
